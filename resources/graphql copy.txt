git clone https://github.com/gevorgabgaryan/express-mong-auth.git

1. npm init -y

2. npm i -D @babel/core @babel/node @babel/preset-env

@babel/core is the core Babel package.
@babel/node allows you to run Node.js applications with Babel.
@babel/preset-env is a preset that compiles modern JavaScript down to a version compatible with the target environment (Node.js in this case).

Update package.json Scripts:
"scripts": {
  "start": "node -r @babel/register app.js"
}
"babel": {
  "presets": [
    [
      "@babel/preset-env",
      {
        "targets": {
          "node": "current"
        }
      }
    ]
  ]
}


3. npm i dotenv

add .env && .env-example
PORT=4000


config/index.js

import * as dotenv from 'dotenv';

dotenv.config();

const config = {
  port: process.env.PORT || 4000,
};

export default config;

4. .gitignore
node_modules
.env

5. npm i express

index.js

import express from 'express';
import config from './config';

const app = express();

app.get('/', (req, res) => {
    res.json({message: "Hello world"})
})

app.listen(config.port, ()=>{
   console.log(`app start on port ${config.port}`)
})

6. npm i nodemon -D
package.json
"dev": "nodemon -r @babel/register index.js"

7. debugger
.vscode/launch.json

{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "type": "node",
            "request": "launch",
            "name": "Launch Program",
            "skipFiles": [
                "<node_internals>/**"
            ],
            "runtimeArgs": ["-r", "@babel/register"],
            "program": "${workspaceFolder}/index.js"
        }
    ]
}

8. npm i graphql express-graphql


data/schema.js

import { buildSchema } from "graphql";

const schema = buildSchema(`
    type Query {
        hello: String
    }
`)

export default schema;

index.js

import { graphqlHTTP } from 'express-graphql';
import schema from './data/schema';



const root = { hello: () => 'Hello world'};

app.use('/graphql', graphqlHTTP({
  schema: schema,
  root: root,
  graphiql: true,
}));


http://localhost:8000/graphql

query {
  hello
}

data/schema.js

const schema = buildSchema(`
    type Product {
        id: ID
        sku: String,
        name: String,
        price: Float,
        discountPercentage: Float,
    }
    type Query {
        product: Product
    }
`)



index.js

const root = { product: () => {
    return {
        id: 1,
        sku: 'Product1',
        name: 'Product1',
        price: 100,
        discountPercentage: 10,
    }
}};

app.use('/graphql', graphqlHTTP({
  schema: schema,
  rootValue: root,
  graphiql: true,
}));

http://localhost:8000/graphql

query {
  product {
    id
    name
    price
  }
}



data/resolvers.js


class Product {
    constructor(id, { name, sku, price, discount}) {
        this.id = id;
        this.name = name;
        this.sku = sku;
        this.price = price;
        this.discount = discount;
     }
}

const productDatabase = {};

const resolvers = {
    getProduct: ({ id }) => {
        return new Product(id, productDatabase[id]);
    },
    createProduct: ({ input }) => {
        let id = require('crypto').randomBytes(10).toString('hex');
        productDatabase[id] = input;
        return new Product(id, input);
    }
}

export default resolvers;


data/schema.js


import { buildSchema } from "graphql";

const schema = buildSchema(`
    type Product {
        id: ID
        sku: String,
        name: String,
        price: Float,
        discountPercentage: Float,
    }

    type Query {
        getProduct(id: ID): Product
    }

    input StoreInput {
        store: String
    }

    input ProductInput {
        id: ID
        sku: String,
        name: String,
        price: Float,
        discountPercentage: Float,
    }

    type Mutation {
        createProduct(input: ProductInput): Product
    }
`);

export default schema;



index.js


app.use('/graphql', graphqlHTTP({
    schema: schema,
    rootValue: resolvers,
    graphiql: true,
}));


http://localhost:8000/graphql

mutation {
  createProduct(input: {
        sku: "sku1",
        name: "product1",
        price: 100,
        discountPercentage: 20,
  }) {
    id,
    name
  }
}


query {
  getProduct (id: "18d1a8f574883de410b2") {
    id
    name
    price
  }
}
